package day0324;

import java.awt.Color;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import day0319.DbConnect;

public class SwingScoreDB extends JFrame implements ActionListener{
	
	AddScore addscore=new AddScore("성적추가폼");
	UpdateScore updatescore = new UpdateScore("성적 수정");
	Container cp;
	DbConnect db=new DbConnect();
	JTable table;
	DefaultTableModel model;
	JButton btnAdd,btnUpdate,btnDel;
	JOptionPane jop;
	
	public SwingScoreDB(String title) {
		super(title);  //JFrame 부모생성자를 통해서 창제목을 통해서 제목을 볼수 있게한다
			
		this.setBounds(10, 10, 900, 500);
			
		cp=this.getContentPane();
		cp.setBackground(new Color(255,255,255));
		//메인프레임 종료
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		initDesign();
		//창을 보여주게 하겠다
		this.setVisible(true);
		
		
	}
	//디자인
	public void initDesign() {
		String [] title= {"번호","이름","반","Java","Jsp","Spring","총점","평균"};
		JPanel pTop=new JPanel();
		this.add("North",pTop);
		
		model=new DefaultTableModel(title,0);   //title에 대한 행 갯수(0으로 설정)
		table=new JTable(model);
		this.add("Center",new JScrollPane(table));
		
		//테이블에 db데이터 출력
		selectTableWrite();
		
		btnAdd=new JButton("성적추가");
		btnAdd.addActionListener(this);
		pTop.add(btnAdd);
		
		btnDel=new JButton("성적삭제");
		btnDel.addActionListener(this);
		pTop.add(btnDel);
		
		btnUpdate=new JButton("성적수정");
		btnUpdate.addActionListener(this);
		pTop.add(btnUpdate);
		
		//addscore에 있는 추가버튼에 이벤트 추가
		addscore.btnAdd.addActionListener(this);
		
		//updatescore에 있는 이벤트 추가
		updatescore.btnMod.addActionListener(this);
	}
	/////////////////////////////////////
	//테이블 출력하는 메서드
	public void selectTableWrite() {
		//테이블 초기화
		model.setRowCount(0);
		
		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		
		String sql="select * from stuscore order by num";
		
		try {
			pstmt=conn.prepareStatement(sql);
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				Vector<String> data=new Vector<String>();
				data.add(rs.getString("num"));
				data.add(rs.getString("name"));
				data.add(rs.getString("ban"));
				data.add(rs.getString("java"));
				data.add(rs.getString("jsp"));
				data.add(rs.getString("spring"));
				data.add(rs.getString("total"));
				data.add(rs.getString("average"));
				//테이블에 추가
				model.addRow(data);
			}
				
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(rs, pstmt, conn);
		}
		
	}
	//insert 메서드 추가
	public void insertScoreData() {
		String name=addscore.tfName.getText();
		String java=addscore.tfJava.getText();
		String jsp=addscore.tfJsp.getText();
		String spring=addscore.tfSpring.getText();
		String ban=(String)addscore.cbBan.getSelectedItem();  //아이템
		
		int tot=Integer.parseInt(java)+Integer.parseInt(jsp)+Integer.parseInt(spring);
		double avg=tot/3.0;
		
		String sql="insert into stuscore values(seq_sungjuk.nextval,?,?,?,?,?,?,?)";
		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, java);
			pstmt.setString(3, jsp);
			pstmt.setString(4, spring);
			pstmt.setInt(5, tot);
			pstmt.setDouble(6, avg);
			pstmt.setString(7, ban);
			
			
			//업데이트(이게 없으면 입력해도 아무 반응 없음)
			pstmt.execute();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(pstmt, conn);
		}
		
	}
	//삭제
	public void deleteScoreData(String num) {
		System.out.println("num="+num);
		String sql="delete from stuscore where num=?";
		
		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, num);
			int a=pstmt.executeUpdate();
			
			if(num==null) {
				System.out.println("취소되었습니다");
				return;
			}
			
			if(a==0) {
				JOptionPane.showMessageDialog(this, "없는 번호입니다");
			}else {
				JOptionPane.showMessageDialog(this, "삭제되었습니다");
			}
			selectTableWrite();	
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(pstmt, conn);
		}
		
	}
	
	//수정할 하나의 데이터를 수정폼에 띄우기(학생 한명의 정보)
	 private void isOneStuData(String num) {
		// TODO Auto-generated method stub
		 System.out.println("수정할 num="+num);
		 String sql="select * from stuscore where num=?";
		 
		 Connection conn=db.getConnection();
		 PreparedStatement pstmt=null;
		 ResultSet rs=null;
		 try {
			pstmt=conn.prepareStatement(sql);
			 pstmt.setString(1, num);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				updatescore.num=num;  //hidden:노출이 안되지만 반드시 표시를 해줘야함
				updatescore.tfName.setText(rs.getString("name"));
				updatescore.tfJava.setText(rs.getString("java"));
				updatescore.tfJsp.setText(rs.getString("jsp"));;
				updatescore.tfSpring.setText(rs.getString("spring"));
				updatescore.cbBan.setSelectedItem(rs.getString("ban"));
				
				//데이트를 읽어온 수정폼이 보이게
				updatescore.setVisible(true);
			}else {
				JOptionPane.showMessageDialog(this, "해당 번호는 없는 시퀀스입니다");
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(rs, pstmt, conn);
		}
	}
	//실제 수정..수정버튼을 누르면 수정
	 public void update() {
		  //반드시 표시 String num=updatescore.num;
		String name=updatescore.tfName.getText();
		String java=updatescore.tfJava.getText();
		String jsp=updatescore.tfJsp.getText();
		String spring=updatescore.tfSpring.getText();
		String ban=(String)updatescore.cbBan.getSelectedItem();
		
		int tot=Integer.parseInt(java)+Integer.parseInt(jsp)+Integer.parseInt(spring);
		double avg=tot/3.0;
		
		String sql="update stuscore set name=?,java=?,jsp=?,spring=?,total="+tot+",average="+avg+",ban=? where num=?";
		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		try {
			
			pstmt=conn.prepareStatement(sql);
			
			pstmt.setString(1, name);
			pstmt.setString(2, java);
			pstmt.setString(3, jsp);
			pstmt.setString(4, spring);
			pstmt.setString(5, ban);
			pstmt.setString(6, updatescore.num);
			
			pstmt.executeUpdate();
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}db.dbClose(rs, pstmt, conn);
	}
	
	//이벤트
	@Override
	public void actionPerformed(ActionEvent e) {
		// 각각의 버튼에 대한 이벤트
		Object ob =e.getSource();
		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		if(ob==btnAdd) {
			//System.out.println("add");
			addscore.setVisible(true); //성적추가창 뜨게
			
		}else if(ob==btnDel) {
			
			String num=JOptionPane.showInputDialog(this, "삭제할 시퀀스");
			deleteScoreData(num);
			
		}else if(ob==btnUpdate) {
			//updatescore.setVisible(true);
			String num=JOptionPane.showInputDialog("수정할 데이터의 번호를 입력하세요");
			this.isOneStuData(num);
			this.update();
			selectTableWrite();
		}else if(ob==addscore.btnAdd) {
			//System.out.println("성적입력");
			//입력폼을 읽어와서 db에 추가
			this.insertScoreData();
			
			//테이블 다시 출력
			selectTableWrite();
			
			//초기화
			addscore.tfName.setText("");
			addscore.tfJava.setText("");
			addscore.tfJsp.setText("");
			addscore.tfSpring.setText("");
			
			//프레임 사라지게
			addscore.setVisible(false);
		}else if(ob==updatescore.btnMod) {
			
		}
		
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		new SwingScoreDB("학생 점수");
		
	}
	
}
